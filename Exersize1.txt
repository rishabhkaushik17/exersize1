Exercise
Name : Rishabh Kaushik

1. Create a repository
    
    git init
    
2. Make some changes -- add some files, change content of some files
    
    touch file1.txt
    touch file2.txt
    git add .
    
3. commit changes
    
    git commit -m "Added file1 and file2"
    nano file3.txt
    nano file1.txt
    git status
    
4. repeat steps 1-3 for 2 more times. try to remove and ignore some files . Use git diff before each commit.
    
    git add .
    git status
    git commit -m "Edited file2 and added file3"
    
    mkdir logs
    echo hello > logs/dev.log
    git status
    git add .
    git commit -m "Added logs folder"
    
    echo logs/ > .gitignore
    code .gitignore
    git status
    git add .gitignore
    git commit -m "Added gitignore"
    
5. create changes and revert those changes using git when those changes are not added to staging are
    
    touch file
    git checkout -- .
    ls
    
6. create changes and revert those changes after adding changes to staging area
    
    touch file
    ls
    git add .
    git status
    git reset HEAD .
    
7. create change and revert those changes after committing those changes.
    
    nano file2.txt
    ls
    git status
    git add .
    git commit -m "Changed file2.txt"
    
    git revert HEAd
    
8. Check repository status before adding changes to staging area, after adding changes to staging area and after committing changes .
    
    git status
    
9. Display all the commits .
    
    git log
    
10. Display a specific commit .
    
    git show 4eb8e036cd617226f1c273608eb5f69405bc1c0f
    
11. create branches called "feature1" and "feature2" from master. 11 . Delete branch "feature2".
    
    git branch feature1
    git branch feature2
    git branch -d feature2
    
12. Make some commits on "feature1".
    
    git checkout feature1
    nano file1.txt
    git commit -a -m "Changed file1.txt in feature1"
    
13. Make some commits on branch "master".
    
    git checkout master
    nano file1.txt
    git commit -a -m "Changed file2.txt in master"
    
14. merge branch "feature1" in "master”
    
    git merge feature1
    git status
    nano file1.txt
    git status
    git add file1.txt
    git commit
    
15. Make some commits on "feature2".
    
    git checkout -b feature2
    touch feature2
    nano file3.txt
    git commit -a -m "Changed file3 in feature2"
    git add .
    git commit -m "Added feature2"
    
16. Make some commits on branch "master".
    
    git checkout master
    touch master
    nano file3.txt
    git add .
    git commit -m "Changed file3 an added master"
    
17. rebase branch "master" in "feature2
    
    git checkout feature2
    git rebase master
    git status
    nano file3.txt
    git add .
    git status
    git rebase --continue
    gitk

18. Find the differences between "merge" and "rebase"
    The difference between merge and rebase is that while merge preserves history as it happened, rebase rewrites it. Merge command integrates two branches into a single branch. Rebase command combines the sequence of commit to a new base commit that provides easier visualization of feature branching workflow.
       
19. Use git stash
    
    git checkout feature1
    git stash
    git checkout feature1
    git checkout master
    git status
    git stash list
    git show stash
    git status
    git stash pop
    git status
    
    git commit -a -m "Modified file1.txt”
    
20. create a repository on github for your working repository and push changes on remote repository.
    
    git remote add origin [git@github.com](mailto:git@github.com):rishabhkaushik17/exersize1.git
    git remote -v
    git push origin master
